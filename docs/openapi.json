{
  "openapi": "3.0.0",
  "info": {
    "title": "CarFlow API",
    "description": "A simple car management API",
    "version": "1.0.0",
    "contact": {
      "name": "Josue Andre da Silva Barros"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local development server"
    }
  ],
  "paths": {
    "/cars": {
      "get": {
        "summary": "List all cars",
        "description": "Returns a list of all cars in the system",
        "operationId": "getAllCars",
        "responses": {
          "200": {
            "description": "A list of cars",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Car"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new car",
        "description": "Adds a new car to the system",
        "operationId": "createCar",
        "requestBody": {
          "description": "Car to add",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Car"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Car created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Car"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Car already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/cars/{id}": {
      "get": {
        "summary": "Get a car by ID",
        "description": "Returns a single car by ID",
        "operationId": "getCarById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of car to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Car"
                }
              }
            }
          },
          "404": {
            "description": "Car not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a car",
        "description": "Updates an existing car",
        "operationId": "updateCar",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of car to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated car object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Car"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Car updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Car"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Car not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a car",
        "description": "Deletes a car from the system",
        "operationId": "deleteCar",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of car to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Car deleted successfully"
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Car not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "summary": "Health check",
        "description": "Returns the health status of the API",
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "description": "API is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "uptime": {
                      "type": "string",
                      "example": "1h2m3s"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "summary": "Get metrics",
        "description": "Returns application metrics",
        "operationId": "getMetrics",
        "responses": {
          "200": {
            "description": "Application metrics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "requests": {
                      "type": "object",
                      "properties": {
                        "total": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "errors": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    },
                    "uptime": {
                      "type": "string"
                    },
                    "response_times": {
                      "type": "object",
                      "properties": {
                        "avg": {
                          "type": "string"
                        },
                        "count": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Car": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "car123"
          },
          "make": {
            "type": "string",
            "example": "Toyota"
          },
          "model": {
            "type": "string",
            "example": "Corolla"
          },
          "year": {
            "type": "integer",
            "format": "int32",
            "example": 2020
          },
          "color": {
            "type": "string",
            "example": "blue"
          }
        },
        "required": [
          "id",
          "make",
          "model",
          "year"
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        }
      }
    }
  }
} 